
#define READ_CLUSTER_DATA_GRID
#include "cluster.fxh"
#include "colormap.fxh"

struct PSInput {
    float4 Pos                      : SV_POSITION;
    float4 WorldPos                 : POSITION1;

    float3 Normal                   : NORMAL;
    float3 Tangent                  : TANGENT;

    float2 UV                       : TEX_COORD;
    float4 Color                    : COLOR;

    nointerpolation uint   TexIndex : TEX_ARRAY_INDEX;
};

struct PSOutput {
    float4 Color : SV_TARGET;
};

void main(in PSInput PSIn, out PSOutput PSOut) {
    uint3 clusterIndex3D = uint3(floor(PSIn.Pos.xy / float2(CLUSTER_TEXTEL_SIZE, CLUSTER_TEXTEL_SIZE)), GetSliceFromDepth(PSIn.Pos.w));
    uint tileIndex = Flatten3D(clusterIndex3D, float2(CLUSTERS_X, CLUSTERS_Y));

	uint lightGridOffset = tileIndex * CLUSTERED_NUM_BUCKETS;

    uint lightCount = 0;
	for(uint i = 0; i < CLUSTERED_NUM_BUCKETS; ++i)
		lightCount += countbits(ClusterDataGrid[lightGridOffset + i].light);

    if(lightCount == 0) {
        PSOut.Color = float4(0.01, 0.01, 0.01, 1.0);
        return;
    }

    float3 lightCountColor = turboColormap(float(lightCount) / MAX_DATA_PER_CLUSTER);
    PSOut.Color = float4(lightCountColor, 1.0);
}
