
#include <lit_pixel_uniforms.fxh>

#define READ_CLUSTER_DATA_GRID
#include <cluster.fxh>
#include <colormap.fxh>

struct PSInput {
    float4 Pos                      : SV_POSITION;
    float4 WorldPos                 : POSITION1;

    float3 Normal                   : NORMAL0;
    float3 Tangent                  : TANGENT0;

    float2 UV                       : TEX_COORD;
    float4 Color                    : COLOR0;

    nointerpolation float  TexIndex : TEX_ARRAY_INDEX;
};

struct PSOutput {
    float4 Color : SV_TARGET;
};

uint GetSliceFromDepth(float depth) {
	return floor(log(depth) * g_LightGridParams.x - g_LightGridParams.y);
}

void main(in PSInput PSIn, out PSOutput PSOut) {
    uint3 clusterIndex3D = uint3(floor(PSIn.Pos.xy / float2(CLUSTER_TEXTEL_SIZE, CLUSTER_TEXTEL_SIZE)), GetSliceFromDepth(PSIn.Pos.w));
    uint tileIndex = Flatten3D(clusterIndex3D, float2(CLUSTERS_X, CLUSTERS_Y));

	uint lightGridOffset = tileIndex * CLUSTERED_LIGHTING_NUM_BUCKETS;

    uint lightCount = 0;
	for(uint i = 0; i < CLUSTERED_LIGHTING_NUM_BUCKETS; ++i)
		lightCount += countbits(g_ClusterDataGrid[lightGridOffset + i]);

    if(lightCount == 0) {
        PSOut.Color = float4(0.01, 0.01, 0.01, 1.0);
        return;
    }

    float3 lightCountColor = turboColormap(float(lightCount) / MAX_LIGHTS_PER_CLUSTER);
    PSOut.Color = float4(lightCountColor, 1.0);
}
