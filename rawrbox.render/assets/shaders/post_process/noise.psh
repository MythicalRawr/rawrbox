


Texture2DArray      g_Texture;
SamplerState        g_Texture_sampler; // By convention, texture samplers must use the '_sampler' suffix

cbuffer Constants {
    // GLOBAL ----
    float4   g_ScreenSize;
    // ------------

    // UNIFORMS ----
    float   g_noiseTimer;
    float   g_noiseIntensity;
    // ------------
};

struct PSInput {
    float4 Pos   : SV_POSITION;
    float2 UV    : TEX_COORD;
};

struct PSOutput {
    float4 Color : SV_TARGET;
};

#include <hash.fxh>

uint3 hash(float2 s) {
	uint4 u = uint4(s, uint(s.x) ^ uint(s.y), uint(s.x) + uint(s.y));
    return pcg3d(u.xyz);
}

void main(in PSInput PSIn, out PSOutput PSOut) {
#if defined(DESKTOP_GL) || defined(GL_ES)
    float2 UV = float2(PSIn.UV.x, 1.0 - PSIn.UV.y);
#else
    float2 UV = PSIn.UV;
#endif

    float4 Color = g_Texture.Sample(g_Texture_sampler, UV);
	float3 h = hash(UV * 3000.0 * g_noiseTimer);
	float a = float(h.x) * (1.0 / float(0xffffffffu));
    float3 noise = float3(a, a, a) * g_noiseIntensity;

	PSOut.Color = float4(Color.rgb - noise.xyz, Color.a);
}
