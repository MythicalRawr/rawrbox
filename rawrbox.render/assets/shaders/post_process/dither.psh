#include <dither.fxh>

#include <camera.fxh>
#include <pixel_post_process_uniforms.fxh>

// ## MAPPING ----------------
#define DitherMode       PostProcessConstants.data[0].x
#define DitherIntensity  PostProcessConstants.data[0].y
#define DitherColorDepth PostProcessConstants.data[0].z
#define DitherThreshold  PostProcessConstants.data[0].w
// ========================

Texture2DArray g_Textures[];
SamplerState   g_Sampler;

struct PSInput {
    float4 Pos   : SV_POSITION;
    float2 UV    : TEX_COORD;
};

struct PSOutput {
    float4 Color : SV_TARGET;
};


void main(in PSInput PSIn, out PSOutput PSOut) {
#if defined(DESKTOP_GL) || defined(GL_ES)
    float3 UV = float3(PSIn.UV.x, 1.0 - PSIn.UV.y, 0);
#else
    float3 UV = float3(PSIn.UV.xy, 0);
#endif

    float4 color = g_Textures[PostProcessConstants.textureID].Sample(g_Sampler, UV);
    float depth = 1;

    // Dither -----
    if(DitherMode == 0.0) { // SLOW MODE
		color.rgb = getDither(UV.xy * ScreenSize, color.rgb, DitherIntensity * depth / 3.0);
	} else {
		color.rgb += getDitherFast(UV.xy * ScreenSize, 1) * DitherIntensity * depth / 3.0;
	}

	// Posterize
	PSOut.Color = saturate(floor(color * DitherColorDepth) / DitherColorDepth);
}
