#include <dither.fxh>

#include <camera.fxh>
#include <pixel_post_process_uniforms.fxh>

// ## MAPPING ----------------
#define DitherMode       PostProcessConstants.data[0].x
#define DitherIntensity  PostProcessConstants.data[0].y
#define DitherDepth      PostProcessConstants.data[0].z
#define DitherColorDepth PostProcessConstants.data[0].w
#define DitherThreshold  PostProcessConstants.data[1].x
// ========================

Texture2DArray      g_Textures[];
SamplerState        g_Textures_sampler; // By convention, texture samplers must use the '_sampler' suffix

struct PSInput {
    float4 Pos   : SV_POSITION;
    float2 UV    : TEX_COORD;
};

struct PSOutput {
    float4 Color : SV_TARGET;
};


void main(in PSInput PSIn, out PSOutput PSOut) {
#if defined(DESKTOP_GL) || defined(GL_ES)
    float2 UV = float2(PSIn.UV.x, 1.0 - PSIn.UV.y);
#else
    float2 UV = PSIn.UV;
#endif

    float4 color = g_Textures[PostProcessConstants.textureID].Sample(g_Textures_sampler, float3(UV.xy, 0));
    if(color.a <= 0.0) discard;

    // Dither -----
    if(DitherMode == 0.0) { // SLOW MODE
		color.rgb = getDither(UV * Camera.viewport.zw, color.rgb, DitherIntensity * DitherDepth / 3.0);
	} else {
		color.rgb += getDitherFast(UV * Camera.viewport.zw, 1) * DitherIntensity * DitherDepth / 3.0;
	}

	// Posterize
	PSOut.Color = saturate(floor(color * DitherColorDepth) / DitherColorDepth);
}
