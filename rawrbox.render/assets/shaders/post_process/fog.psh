#include <camera.fxh>
#include <pixel_post_process_uniforms.fxh>

// ## MAPPING ----------------
#define FOG_COLOR PostProcessConstants.data[0]
#define FOG_TYPE int(PostProcessConstants.data[1].x)
#define FOG_END PostProcessConstants.data[1].y
#define FOG_DENSITY PostProcessConstants.data[1].z
// ========================

Texture2DArray g_Textures[];
SamplerState   g_Sampler;

struct PSInput {
    float4 Pos   : SV_POSITION;
    float2 UV    : TEX_COORD;
};

struct PSOutput {
    float4 Color : SV_TARGET;
};

void main(in PSInput PSIn, out PSOutput PSOut) {
#if defined(DESKTOP_GL) || defined(GL_ES)
    float3 UV = float3(PSIn.UV.x, 1.0 - PSIn.UV.y, 0);
#else
    float3 UV = float3(PSIn.UV.xy, 0);
#endif

    float4 Color = g_Textures[PostProcessConstants.textureID].Sample(g_Sampler, UV);
    float Depth = g_Textures[PostProcessConstants.textureDepthID].Sample(g_Sampler, UV).r;
    Depth = 1.0 - (2.0 * NearFar.x) / (NearFar.y + NearFar.x - Depth * (NearFar.y - NearFar.x));

    // Calculate fog factor based on depth and fog parameters
    float fogFactor = 0.0;
    if (FOG_TYPE == 0) {
        // Linear fog
        fogFactor = saturate((Depth - FOG_END) * FOG_DENSITY);
    } else if (FOG_TYPE == 1) {
        // Exponential fog
        fogFactor = exp(-FOG_DENSITY * (Depth - FOG_END));
    } else if (FOG_TYPE == 2) {
        // Exponential squared fog
        fogFactor = exp(-pow(FOG_DENSITY * (Depth - FOG_END), 2.0));
    }

    // Blend the original color with the fog color
    PSOut.Color = lerp(Color, FOG_COLOR, clamp(fogFactor, 0.0, 1.0));
}
